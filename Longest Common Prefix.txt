class Solution {
//time complexity=O(n^2)
public:
    string longestCommonPrefix(vector<string>& s) 
    {
        string result="";
        char ch;
        int n=INT_MAX,i;
        
        if(s[0]=="")
           return result;
         
        if(s.size()==1)
           return s[0];
        
        for(i=0;i<s.size();i++)
        {
            if(n>s[i].length())
                n=s[i].length();
        }
       
       if(s.size()>1)
        {
            for(int i=0;i<n;i++)
            {
                ch=s[0][i];    
                for(int j=1;j<s.size();j++)
                {
                    if(ch!=s[j][i])
                        return result;
                }
                result.push_back(s[0][i]);
             }
        }
        
    if(!result.empty())
       return result;
    else
        return "";
    }
   
};

--optimised solution---
class Solution {
//time complexity=O(n)
public:
    string longestCommonPrefix(vector<string>& s) 
    {
        string result="";
        char ch;
        int n=INT_MAX,i;
        
        if(s[0]=="")
           return result;
         
        if(s.size()==1)
           return s[0];
        
        for(i=0;i<s.size();i++)
        {
            if(n>s[i].length())
                n=s[i].length();
        }
        
        sort(s.begin(),s.end());
        
       if(s.size()>1)
        {
            for(int i=0;i<n;i++)
            {
                ch=s[0][i];    
                if(ch!=s[s.size()-1][i])
                    break;
                
                result.push_back(s[0][i]);
             }
        }
        
        return result;
  
    }
   
};
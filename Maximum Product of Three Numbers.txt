<---brute force approach--->
class Solution {//time complexity=O=very bad 
public:
    int maximumProduct(vector<int>& nums) 
    {
        int mp=INT_MIN,p,pr;
        
        if(nums.size()==3)
            return(nums[0]*nums[1]*nums[2]);
        
        for(int i=0;i<(nums.size()-2);i++)
        {
            for(int j=i+1;j<(nums.size()-1);j++)
            {
                p=nums[i]*nums[j];
                for(int k=j+1;k<(nums.size());k++)
                {
                    pr=p*nums[k];
                    mp=max(pr,mp);
                }
            }
            
        }
    return mp;
    }
};

<----optimal solution--->
 // our answer must be either
        // 1) (firstmax*secondmax*thirdmax)
        // 2) (firstmin*secondmin*firstmax)
class Solution {
public:
    int maximumProduct(vector<int>& nums) 
    {
        int n=nums.size();
        
        if(n==3)
            return(nums[0]*nums[1]*nums[2]);
       
        sort(nums.begin(),nums.end());
            return(max(nums[0]*nums[1]*nums[n-1] , nums[n-1]*nums[n-2]*nums[n-3]));
    }
};